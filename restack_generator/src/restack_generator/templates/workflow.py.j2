from restack_ai.workflow import workflow, log
from datetime import timedelta
from typing import Dict, Any, Optional
from pydantic import BaseModel, Field

class {{ name }}Input(BaseModel):
    """Input schema for {{ name }} workflow"""
    {% for field_name, field_info in input_schema.items() %}
    {{ field_name }}: {{ field_info.type }}{% if field_info.get('description') %} = Field(description="{{ field_info.description }}"){% endif %}{% if field_info.get('default') %} = {{ field_info.default }}{% endif %}

    {% endfor %}

class {{ name }}Output(BaseModel):
    """Output schema for {{ name }} workflow"""
    {% for field_name, field_info in output_schema.items() %}
    {{ field_name }}: {{ field_info.type }}{% if field_info.get('description') %} = Field(description="{{ field_info.description }}"){% endif %}{% if field_info.get('default') %} = {{ field_info.default }}{% endif %}

    {% endfor %}

@workflow.defn(name="{{ name }}")
class {{ name }}Workflow:
    """{{ description }}"""
    
    def __init__(self):
        self.logger = workflow.get_logger()
        self.name = "{{ name }}"

    {{ code | indent(4) }}